Bootstrap: docker
From: python:3.9-slim

%labels
    Author Ahmed
    Version 0.1.0
    Description "GOT-OCR 2.0 Service Container"

%files
    globe.py /app/globe.py
    render.py /app/render.py 
    main.py /app/main.py
    render_tools/ /app/render_tools/
    frontend/ /app/frontend/
    static/ /app/static/
    requirements.txt /app/requirements.txt

%environment
    export OMP_NUM_THREADS=4
    export MKL_NUM_THREADS=4
    export NUMEXPR_NUM_THREADS=4
    export TOKENIZERS_PARALLELISM=true
    export UVICORN_TIMEOUT=300
    export PATH="/app:$PATH"
    export PYTHONPATH="/app:$PYTHONPATH"
    # Variables pour CUDA
    export NVIDIA_VISIBLE_DEVICES=all
    export NVIDIA_DRIVER_CAPABILITIES=all

%post
    echo "[INFO] Démarrage du post conteneur GOT-OCR"
    echo "[INFO] Update systeme and install git"
    apt-get update && apt-get install -y git
    echo "[INFO] Update pip"
    pip install --upgrade pip
    echo "[INFO] Install requirements"
    pip install -r --no-cache-dir --target=$PACKAGES_DIR /app/requirements.txt
    
%runscript
    cd /app
    echo "[INFO] Démarrage du conteneur GOT-OCR"
    
    # Définir le répertoire des packages
    PACKAGES_DIR="/data/asidimoh/GOT2/GOT-OCR2.0/python_packages"
    mkdir -p $PACKAGES_DIR
    
    # Définir PIP_CACHE_DIR pour éviter d'utiliser ~/.cache/pip
    export PIP_CACHE_DIR="/data/asidimoh/GOT2/GOT-OCR2.0/pip_cache"
    mkdir -p $PIP_CACHE_DIR
    
    # Ajouter le répertoire au PYTHONPATH
    export PYTHONPATH=$PACKAGES_DIR:$PYTHONPATH
    
    # Vérification des répertoires critiques
    if [ ! -d "/app/render_tools" ]; then
        echo "[ERREUR] Le répertoire /app/render_tools n'existe pas!"
        echo "[INFO] Tentative de montage depuis l'hôte..."
    fi
    
    if [ ! -d "/app/frontend" ]; then
        echo "[ERREUR] Le répertoire /app/frontend n'existe pas!"
        echo "[INFO] Tentative de montage depuis l'hôte..."
    fi
    
    # Vérifier les packages critiques un par un
    NEED_FASTAPI=0
    NEED_UVICORN=0
    NEED_TRANSFORMERS=0
    NEED_TORCH=0
    NEED_PILLOW=0
    NEED_MULTIPART=0
    
    # Vérifier fastapi
    if ! python -c "import fastapi" 2>/dev/null; then
        NEED_FASTAPI=1
        echo "[INFO] Installation de fastapi..."
        pip install --no-cache-dir --target=$PACKAGES_DIR fastapi
    fi
    
    # Vérifier uvicorn
    if ! python -c "import uvicorn" 2>/dev/null; then
        NEED_UVICORN=1
        echo "[INFO] Installation de uvicorn..."
        pip install --no-cache-dir --target=$PACKAGES_DIR uvicorn
    fi
    
    # Vérifier transformers
    if ! python -c "import transformers" 2>/dev/null; then
        NEED_TRANSFORMERS=1
        echo "[INFO] Installation de transformers..."
        pip install --no-cache-dir --target=$PACKAGES_DIR transformers
    fi
    
    # Vérifier torch
    if ! python -c "import torch" 2>/dev/null; then
        NEED_TORCH=1
        echo "[INFO] Installation de torch et torchvision..."
        pip install --no-cache-dir --target=$PACKAGES_DIR torch torchvision
    fi
    
    # Vérifier PIL
    if ! python -c "import PIL" 2>/dev/null; then
        NEED_PILLOW=1
        echo "[INFO] Installation de pillow (PIL)..."
        pip install --no-cache-dir --target=$PACKAGES_DIR pillow
    fi
    
    # Vérifier python-multipart
    if ! python -c "import multipart" 2>/dev/null; then
        NEED_MULTIPART=1
        echo "[INFO] Installation de python-multipart..."
        pip install --no-cache-dir --target=$PACKAGES_DIR python-multipart
    fi
    
    # Vérifier accelerate (pour GPU)
    if ! python -c "import accelerate" 2>/dev/null; then
        echo "[INFO] Installation de accelerate pour l'accélération GPU..."
        pip install --no-cache-dir --target=$PACKAGES_DIR accelerate
    fi
    
    # Vérifier optimum
    if ! python -c "import optimum" 2>/dev/null; then
        echo "[INFO] Installation de optimum..."
        pip install --no-cache-dir --target=$PACKAGES_DIR optimum
    fi
    
    # Vérification si CUDA est disponible
    echo "[INFO] Vérification CUDA"
    python -c "import torch; print('CUDA disponible:', torch.cuda.is_available()); print('Nombre de GPUs:', torch.cuda.device_count()); print('GPUs trouvés:', [torch.cuda.get_device_name(i) for i in range(torch.cuda.device_count())])"
    
    # Démarrer le serveur avec CUDA_VISIBLE_DEVICES
    echo "[INFO] Démarrage du serveur Uvicorn..."
    CUDA_VISIBLE_DEVICES=0 PYTHONPATH=$PACKAGES_DIR:$PYTHONPATH python -m uvicorn main:app --host 0.0.0.0 --port 8000 --timeout-keep-alive 300